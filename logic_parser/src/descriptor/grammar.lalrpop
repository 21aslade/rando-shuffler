use std::iter;
use std::convert::Infallible;

use super::ast::*;

#[LALR]
grammar(input: &str);

pub Rules = Rule*;

Rule: RuleDef<'input, S> =
    <name:"keyword"> "(" <values:Value*> ")" "=" <body:RuleBody> => RuleDef { <> };

RuleBody: RuleBody<'input, S>  = {
    RefUnk,
    CountyLiteral => RuleBody::County(RuleBodyCounty::Constant(<>)),
    LinearComb => RuleBody::County(<>),
    Count => RuleBody::County(<>),
    Access => RuleBody::Truthy(<>),
    Compare => RuleBody::Truthy(<>),
    Exists => RuleBody::Truthy(<>),
    All => RuleBody::Truthy(<>),
    Posterior => RuleBody::Truthy(<>),
    Prior => RuleBody::Truthy(<>),
    TruthyLiteral => RuleBody::Truthy(RuleBodyTruthy::Constant(<>))
};

RuleBodyCounty: RuleBodyCounty<'input, S> = {
    CountyLiteral => RuleBodyCounty::Constant(<>),
    RefCounty,
    LinearComb,
    Count,
};

RuleBodyTruthy: RuleBodyTruthy<'input, S> = {
    TruthyLiteral => RuleBodyTruthy::Constant(<>),
    RefTruthy,
    Access,
    Compare,
    Exists,
    All,
    Posterior,
    Prior
};

#[inline]
Ref = {
    <name:"keyword"> "(" <values:Value*> ")"
}

RefUnk: RuleBody<'input, S> = Ref => RuleBody::Reference(<>);

CountyLiteral: u32 = "num" => <>.parse::<u32>();

RefCounty: RuleBodyCounty<'input, S> = Ref => RuleBodyCount::Reference(<>)

LinearComb: RuleBodyCounty<'input, S> = <f:(<RuleBodyCounty> <("*" <CountyLiteral>)?)> <m:("+" <RuleBodyCounty> <("*" <CountyLiteral>)?>)> => {
    let values = std::iter::once(f)
        .chain(m.into_iter())
        .map(|(n, c)| (n, c.unwrap_or_else(1)))
        .collect::<Vec<_>>();
    
    RuleBodyCounty::LinearComb(values)
};

Count: RuleBodyCounty<'input, S> = "+" "v" <"keyword"> "<-" <Relation> "-" <Value> "(" <RuleBodyTruthy> ")" => {
    RuleBodyTruthy::Exists(<>)
};

RefTruthy: RuleBodyTruthy<'input, S> = Ref => RuleBodyTruthy::Reference(<>);

Access: RuleBodyTruthy<'input, S> = "[" Ref "]" => RuleBodyTruthy::Access(<>);

Compare: RuleBodyTruthy<'input, S> = <RuleBodyCounty> ">=" <CountyLiteral> => RuleBodyTruthy::Compare(<>);

Exists: RuleBodyTruthy<'input, S> = "?" "v" <"keyword"> "<-" <Relation> "-" <Value> "(" <RuleBodyTruthy> ")" => {
    RuleBodyTruthy::Exists(<>)
};